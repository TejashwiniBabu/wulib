////////////////////// GLOBAL VARIABLES////////////////////var doc = app.activeDocument;var layers = doc.layers;var activeLayer = doc.activeLayer;var numberOfLayers = layers.length;///////////////////////////////////////      DEBUGZ THA C0DEZ/////////////////////////////////// print object properties/methods function printObj(obj) {    var key;    $.write("----------\n");    $.write("keys: \n\n");    for(key in obj) {            $.write(key + " : " + obj[key] +'\n');     }    $.write("----------\n");}//write to consolefunction print(i) {    if(i == "object"){         print("you are trying to printObject, use printObj(); function");     }    else {          $.write(i+"\n");     }}function printType(input) {    $.write(typeof input);}function isObject(myInput) {if (typeof myInput === 'object' && !myInput.length) {    return true;} else { return false; }}////////////////////////////////////////// tools////////////////////////////////////////        //set up array for each itemToLoop    /*     var itemNames = [];        for( i = 0; i < itemsToLoop.length; i++) {        var itemName[i] = itemsToLoop[i].name;        // push layer/symbol/path name to correct key name        itemNames.push(itemName[i]);    }    *///create class with all things we would ever want to loop through layers, symbolItems, pathItems.// already a class for this look up: pageItemsfunction documentItems() {       var doc = app.activeDocument;    // list of items we might want to loop through    var itemsToLoop = [doc.layers, doc.symbolItems];    //reference for method to know how many layers, pathitems, symbols etc are being looped    //can I do: this.itemsToLoop = [doc.layers, doc.symbolItems]; to remove prev var?    this.itemsToLoop = [doc.layers, doc.symbolItems];}documentItems.prototype.findAndReplace = function(find, replace) {    var findTextInSymbolName = prompt("Text to find", find);    var replaceTextInSymbolName = prompt("Text to replace", replace);    for( i = 0; i < this.itemsToLoop[i].length; i++){        for( i = 0; i < this.itemName[i].length; i++){            // find and replace, if no matches then it just continues with no changes,             // built into replace method.            var currentItemName = itemToLoop[i].name;            currentItemName.replace(findTextInSymbolName, replaceTextInSymbolName);         }    }}function SymbolName() {    this.name = doc.symbolItems;}SymbolName.prototype.findAndReplace = function(find, replace) {      var findTextInSymbolName = prompt("Text to find", this.find);      var replaceTextInSymbolName = prompt("Text to replace", this.replace);          for( i = 0; i < this.itemsToLoop[i].length; i++){        for( i = 0; i < this.itemName[i].length; i++){            // find and replace, if no matches then it just continues with no changes,             // built into replace method.            var currentItemName = itemToLoop[i].name;            currentItemName.replace(findTextInSymbolName, replaceTextInSymbolName);         }    }  }////////////////////////////////////////// perform action on a layer// ****only works on top-most layers // doActionOnLayer("note", testFunction);//////////////////////////////////////////accepts layername as string and function name should not have ()function doActionOnLayer(layerName, functionName) {    for (var i = 0; i < numberOfLayers; i++) {         var customName = layerName; //layerName should be string        var myLayer = app.activeDocument.layers[i];        var myLayer = myLayer.name;        alert(myLayer);        if (customName == myLayer) {            var myLayerIndex = i;            alert(myLayerIndex);            functionName(myLayerIndex);            return myLayerIndex;        }    }}////////////////////////////////////////// get index name by layer name// ****only works on top-most layers ////////////////////////////////////////function getIndexByName(layerName) {    for (var i = 0; i < numberOfLayers; i++) {         var customName = layerName; //layerName should be string        var myLayer = app.activeDocument.layers[i].name;        if (customName == myLayer) {            return i;        }    }}////////////////////////////////////////// get layer name by index// ****only works on top-most layers ////////////////////////////////////////function getLayerNameByIndex(layerIndex) {     var layer = app.activeDocument.layers[layerIndex];    layer.visible = true;    var layerName = layer.name;    // Replace weird charecters in layer names    var layerName = layerName.replace(/\_-+/g,'-'); // Collapse multiple dashes into a single one     var layerName = layerName.replace(/\W+/g,'-');  // Replace Non-word characters    var layerName = layerName.replace(/^[-]+/, ''); // Remove forward dash    var layerName = layerName.replace(/[-]+$/, '');  // Remove trailing dash    return layerName; }//////////////////////////////////////// Return type of variable////////////////////////////////////function typeOf(input){ alert(typeof input); }//////////////////////////////////////// Layer by name////////////////////////////////////function layerName(index, input){    var myLayer = app.activeDocument.layers[input];    var myLayer = myLayer.name;}//////////////////////////////////////// loop groups by layer name////////////////////////////////////// use case /*function me() {    alert(itemName);}var itemName;loopPathItemsByLayer("parent", me);*///loop through all the page Items in a layer and runs function on each layerfunction findLayerAndExecute(layerName, functionName) { // layername accepts string, function name accepts function i.e. if you have function named runMe() then pass runMe    var pageItems = doc.layers.getByName(layerName).pageItems;    for ( var i = 0; i < pageItems.length; i++ ) {              print(grps.length);              var currentItem = pageItems[i];              var itemName = currentItem.name;              doc.selection = null;              pageItems[i].selected = true;              app.redraw();              functionName();    }}//////////////////////////////////////// match input color////////////////////////////////////function matchColor(r, g, b, inputColor) {        var matchMyRGB = new RGBColor();        matchMyRGB.red = r;        matchMyRGB.red = g;        matchMyRGB.red = b;        doActionOnLayers();        if(inputColor == matchMyRGB) {            return true;        }}//////////////////////////////////////// run action on top level layers//////////////////////////////////////input based on indexfunction doActionOnLayers(input) {    var myLayer = doc.layers[input];    for (var i = 0; i < myLayers; i++){        input();    }}//////////////////////////////////////// get object width and height//////////////////////////////////////input based on indexfunction getItemWidthHeightName(input) {    var myLayer = doc.layers[input];    var divNumber = myLayer.pathItems.length;    for (var i = 0; i < divNumber; i++){        var itemWidth = doc.pathItems[i].width;        var itemHeight = doc.pathItems[i].height;        var itemName = doc.pathItems[i].name;        divHeightWidth.push(itemName, itemWidth, itemHeight);          }    return divHeightWidth;}//************************////////////////////////////write CSV///////////////////////////*function CSV(how, exportObjectSize, docName){        this.how = how;                     // append is default        this.exportSize = exportObjectSize; // yes/no        this.docName = docName;             // file name to export to } CSV.prototype.export = function(input) {    var inputFolder = Folder.selectDialog();    var csv = new File(inputFolder+"/"+this.docName+".csv");          // open text again          switch(this.how) {            case "overwrite": csv.open("w"); break; //overwrite last setting            case "append": csv.open("a"); break; //append to file            default: csv.open("a");// set default to append to file          }          csv.writeln(input); // write your new data to it          csv.close(); // close csv}*/function CSVFile(fileName) {    this.fileName = fileName;}CSVFile.prototype.getFilePath = function() {    var inputFolder = Folder.selectDialog();    return inputFolder + "/" + this.fileName + ".csv";};CSVFile.prototype.write = function(input, mode) {    var csv = new File(this.getFilePath());    csv.open(mode || "w"); // defaulted to write to file, also allows append    csv.writeln(input); // write your new data to it    csv.close(); // close csv};CSVFile.prototype.append = function(input) {    this.write(input, "a"); // append to file};CSVFile.prototype.edit = function(input) {   this.edit (input, "e"); //open in edit mode   tabellaDoc.open("e");// open in edit mode   tabellaDoc.seek(0, 2); // go to end of file   var stringa = activeDocument.name + " , " + dataFormattata + " , ";    tabellaDoc.writeln(input);    tabellaDoc.close(); }////////////////////////////////////////////////////// crop artboard to visible bounds// fix to get around fact artboard wont crop to symbols////////////////////////////////////////////////////function cropArtboardToItem() {    var doc = app.activeDocument;    var docVB = doc.visibleBounds;    var left = docVB[0];    var top = docVB[1];    var right = docVB[2];    var bottom = docVB[3];    var ab = doc.artboards.getActiveArtboardIndex();    doc.artboards[ab].artboardRect = [left,top,right,bottom];}//////////////////////////// breakLinkToSymbols//////////////////////////function breakAllSymbols(){     var doc = app.activeDocument;     var SLen=doc.symbols.length-1;     for (i=SLen;i>-1;i--){         var symbolName = doc.symbols[i].name         doc.symbols[i].duplicate(doc, ElementPlacement.PLACEATBEGINNING);         doc.symbols[i].remove();         doc.symbols[i].name = symbolName}     return true;}////////////////////save as PNG24//////////////////function exportFileToPNG24(name) {    if ( app.documents.length > 0 ) {        if (dest == undefined){            // !!! define dest outside of function so it doesn't ask for folder over and over            dest = Folder.selectDialog();            }        var exportOptions = new ExportOptionsPNG24();        var type = ExportType.PNG24;        var fileSpec = new File(dest+"/"+name);        exportOptions.antiAliasing = false;        exportOptions.transparency = true;        app.activeDocument.exportFile( fileSpec, type, exportOptions );    }}//////////////////////////// Get Item WidthHeight//////////////////////////function getItemWidthHeightName(input) {    var myLayer = doc.layers[input];    var divNumber = myLayer.pathItems.length;    for (var i = 0; i < divNumber; i++){        var itemWidth = doc.pathItems[i].width;        var itemHeight = doc.pathItems[i].height;        var itemName = doc.pathItems[i].name;        divHeightWidth.push(itemName, itemWidth, itemHeight);          }    return divHeightWidth;}// --------------------//************************//////////////////////////// Export Symbol As PNG//////////////////////////function exportSymbolasPNG(){    var value = 0;    var win = new Window("palette{text:'We are bam wammin some kazam...hold on to those breeches',bounds:[100,100,550,140]," +                  "progress:Progressbar{bounds:[20,10,430,28] , minvalue:0,value:" + value + "}" +                  "};" );    win.progress.maxvalue = iCount;    for(var i = 0; i < iCount; i++) {        var symbolDocRef = doc;        var symbolRef = doc.symbolItems[i];        var newDoc = app.documents.add();        var newDocLayer = newDoc.layers.add();        symbolRef.duplicate(newDoc, ElementPlacement.PLACEATEND);        cropArtboardToItem();        //alert(dest);        exportFileToPNG24(symbolRef.symbol.name);        newDoc.close(SaveOptions.DONOTSAVECHANGES);        updateProgressBar(win);    }}//////////////////// progressBar////////////////////!! must be inside of a loop//!! also needs window input as win check function updateProgressBar(win) {    win.center();    win.show();    win.progress.value++;    //update the window    win.layout.layout(true);}function SymbolLibrary() {    this.all = this.doc.symbols;}////////////////////////////////////   test for float//////////////////////////////////function testForFloat(myArray) {    for( var i in myArray) {                if(key % 1 === 0) {            alert(myArray[i]+ "is not a float");        }    }}////////////////////////////////////   mySymbol class//////////////////////////////////function rotate90(input){ input.unshift(input.pop()); } //shift array one to right so it follows CSS style borders//accepts layer name or indexfunction MySymbol(input){    this.doc = app.activeDocument;    this.mySymbolIndex = input || 0;     this.mySymbolItem = this.hasSymbolIndex() ? this.doc.symbolItems[this.mySymbolIndex] : false;    this.visibleBounds = this.mySymbolItem.visibleBounds;    this.controlBounds = this.mySymbolItem.controlBounds;     // array of 4 numbers for position of bounding box     this.name = this.mySymbolItem.symbol.name;    this.top = Math.abs(this.mySymbolItem.top);    this.left = this.mySymbolItem.left;    this.topLeft = [Math.abs(this.mySymbolItem.top), this.mySymbolItem.left];} MySymbol.prototype.getPosition = function(top, left) {    //if(topLeft) {    var relativePositionTop = this.top - top;    var relativePositionLeft= this.left - left;    return [relativePositionTop, relativePositionLeft];    //} else { return [this.top, this.left]; }};MySymbol.prototype.hasSymbolIndex = function() {    return this.mySymbolIndex <= this.doc.symbolItems.length - 1;};MySymbol.prototype.getWidth = function() {    return this.mySymbolItem ? Math.round(this.mySymbolItem.width) : 0;};MySymbol.prototype.getHeight = function() {    return this.mySymbolItem ? Math.round(this.mySymbolItem.height) : 0;};// returns width and height as an arrayMySymbol.prototype.getWidthHeight = function() {     return [this.getWidth(), this.getHeight()];}MySymbol.prototype.isIn = function(parentItem) {    var isTrue,        child = this.visibleBounds,        parentVB = parentItem.visibleBounds,        parentLeft = parentVB[0], parentTop = Math.abs(parentVB[1]), parentRight = parentVB[2], parentBottom = Math.abs(parentVB[3]);      //print("parent is : " + parentItem.name);    //print("child is : " + this.name);    pointIsIn(parentLeft, parentTop, parentBottom, parentRight, child);    function pointIsIn(parentLeft, parentTop, parentBottom, parentRight, child) {                 //print(parentItem.name+" bounds: "+parentLeft+" "+parentTop+" "+parentRight+" "+parentBottom);    //print("symbol bounds: "+ child[0] +" "+ Math.abs(child[1]) +" "+ child[2] +" "+ Math.abs(child[3]));                       if ( child[0] >= parentLeft && Math.abs(child[1]) >= parentTop && child[2] <= parentRight && Math.abs(child[3]) <= parentBottom) {            //print("pass");            isTrue = true;            //return true;        } else {            //print("fail");            isTrue = false;            //return false;       }    }    //print("is true? "+isTrue);    if (isTrue){ return true; } }// get symbol by nameMySymbol.prototype.getByName = function(nameString) {    for (i=0; i<idoc.symbolItems.length; i++) // loop thru all symbol items in the active document        {            var symbolitem = idoc.symbolItems[i]; // get each symbol item            if (symbolitem.symbol.name == nameString) { // check if it is an instance of "Apples" symbol                symbolitem.selected = true; // if it is, then select it            }     }} ////////////////////////////////////   export first s//   get symbol height/width//////////////////////////////////        //var firstSymbol = new mySymbol(1);        //var myHeight = mySymbol.height();        //var myWidth = mySymbol.width();////////////////////// END FUNCTIONS  //////////////////////