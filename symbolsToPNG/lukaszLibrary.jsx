////////////////////// GLOBAL VARIABLES////////////////////var doc = app.activeDocument;var layers = doc.layers;var activeLayer = doc.activeLayer;var numberOfLayers = layers.length;///////////////////////////// DEBUGZ DAT CODEZ MKAY?/////////////////////////////// print object properties/methods function printObj(obj) {    var key;    $.write("----------\n");    $.write("keys: \n\n");    for(key in obj) {            $.write(key + " : " + obj[key] +'\n');     }    $.write("----------\n");}//write to consolefunction print(i) {    if(i == "object"){         print("you are trying to printObject, use printObj(); function");     }    else {          $.write(i+"\n");     }}function printType(input) {    $.write(typeof input);}function isObject(myInput) {if (typeof myInput === 'object' && !myInput.length) {    return true;} else { return false; }}////////////////////// FUNCTIONS////////////////////// get layer name by index// ****only works on top-most layersfunction getLayerNameByIndex(layerIndex) {     var layer = app.activeDocument.layers[layerIndex];    layer.visible = true;    var layerName = layer.name;    // Replace weird charecters in layer names    var layerName = layerName.replace(/\_-+/g,'-'); // Collapse multiple dashes into a single one     var layerName = layerName.replace(/\W+/g,'-');  // Replace Non-word characters    var layerName = layerName.replace(/^[-]+/, ''); // Remove forward dash    var layerName = layerName.replace(/[-]+$/, '');  // Remove trailing dash    return layerName; }//////////////////////////////////////// Return type of variable////////////////////////////////////function typeOf(input){ alert(typeof input); }//////////////////////////////////////// Layer by name////////////////////////////////////function layerName(index, input){    var myLayer = app.activeDocument.layers[input];    var myLayer = myLayer.name;}//////////////////////////////////////// get object width and height////////////////////////////////////function getObjectWidthHeight(input) {    var myLayer = doc.layers[input];    var divNumber = myLayer.pathItems.length;    for (var i = 0; i < divNumber; i++){        var itemWidth = doc.pathItems[i].width;        var itemHeight = doc.pathItems[i].height;        var itemName = doc.pathItems[i].name;        divHeightWidth.push(itemName, itemWidth, itemHeight);          }    return divHeightWidth;}////////////////////////////write CSV//////////////////////////function writeCSV(input){        //alert("div height width: "+divHeightWidth);        var inputFolder = Folder.selectDialog();    var csv = new File(inputFolder+"/divStructure.txt");          // open text again          csv.open("w");          // write your new data to it          csv.writeln(divHeightWidth);          csv.close();}//////////////////////////////////////////////////////// crop artboard to visible bounds// fix to get around fact artboard wont crop to symbols////////////////////////////////////////////////////function cropArtboardToItem() {    var doc = app.activeDocument;    var docVB = doc.visibleBounds;    var left = docVB[0];    var top = docVB[1];    var right = docVB[2];    var bottom = docVB[3];    var ab = doc.artboards.getActiveArtboardIndex();         doc.artboards[ab].artboardRect = [left,top,right,bottom];}//////////////////////////// breakLinkToSymbols//////////////////////////function breakAllSymbols(){     var doc = app.activeDocument;     var SLen=doc.symbols.length-1;     for (i=SLen;i>-1;i--){         var symbolName = doc.symbols[i].name         doc.symbols[i].duplicate(doc, ElementPlacement.PLACEATBEGINNING);         doc.symbols[i].remove();         doc.symbols[i].name = symbolName}     return true;}////////////////////save as PNG24//////////////////function exportFileToPNG24(name) {    if ( app.documents.length > 0 ) {        if (dest == undefined){            // !!! define dest outside of function so it doesn't ask for folder over and over            dest = Folder.selectDialog();            }        var exportOptions = new ExportOptionsPNG24();        var type = ExportType.PNG24;        var fileSpec = new File(dest+"/"+name);        exportOptions.antiAliasing = false;        exportOptions.transparency = true;        app.activeDocument.exportFile( fileSpec, type, exportOptions );    }}//////////////////////////// Export Symbol As PNG//////////////////////////function exportSymbolasPNG(){    /*if (!doc.symbolItems[6].visible) {        doc.symbolItems[2].visible = true;        alert("not visible");        }*/    var value = 0;    var win = new Window("palette{text:'We are bam wammin some kazam...hold on to those breeches',bounds:[100,100,550,140]," +                  "progress:Progressbar{bounds:[20,10,430,28] , minvalue:0,value:" + value + "}" +                  "};" );    win.progress.maxvalue = iCount;    for(var i = 0; i < iCount; i++) {        var symbolDocRef = doc;        var symbolRef = doc.symbolItems[i];        var newDoc = app.documents.add();        var newDocLayer = newDoc.layers.add();        symbolRef.duplicate(newDoc, ElementPlacement.PLACEATEND);        cropArtboardToItem();        //alert(dest);        exportFileToPNG24(symbolRef.symbol.name);        newDoc.close(SaveOptions.DONOTSAVECHANGES);        updateProgressBar(win);            }}    //////////////////    // progressBar    //////////////////    //!! must be inside of a loop    function updateProgressBar(win) {            win.center();            win.show();            win.progress.value++;            //update the window            win.layout.layout(true);    }////////////////////// END FUNCTIONS  //////////////////////